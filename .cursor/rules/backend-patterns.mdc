---
globs: backend/**/*.cs
---

# Backend Development Patterns

## Controller Organization
- **Admin Controllers**: [backend/TypesettingMIS.API/Controllers/Admin/](mdc:backend/TypesettingMIS.API/Controllers/Admin/) - Admin-only endpoints with `[Authorize(Roles = "Admin")]`
- **Auth Controller**: [backend/TypesettingMIS.API/Controllers/AuthController.cs](mdc:backend/TypesettingMIS.API/Controllers/AuthController.cs) - Authentication endpoints
- **Base Controller**: [backend/TypesettingMIS.API/Controllers/BaseController.cs](mdc:backend/TypesettingMIS.API/Controllers/BaseController.cs) - Common functionality for tenant context

## Entity Patterns
- All entities inherit from [BaseEntity](mdc:backend/TypesettingMIS.Core/Entities/BaseEntity.cs)
- Use `Guid` for primary keys
- Include `CreatedAt`, `UpdatedAt`, `IsDeleted` from BaseEntity
- Navigation properties should be properly configured in DbContext

## Service Patterns
- Services implement interfaces from [Core/Services/](mdc:backend/TypesettingMIS.Core/Services/)
- Register services in [DependencyInjection.cs](mdc:backend/TypesettingMIS.Infrastructure/DependencyInjection.cs)
- Use dependency injection for all dependencies

## DTO Patterns
- Create separate DTOs for requests and responses
- Store in [Core/DTOs/](mdc:backend/TypesettingMIS.Core/DTOs/) organized by feature

## Database Patterns
- Use Entity Framework Core with PostgreSQL
- Configure entities in [ApplicationDbContext.OnModelCreating](mdc:backend/TypesettingMIS.Infrastructure/Data/ApplicationDbContext.cs)
- Create migrations for schema changes

## Security Patterns
- Implement role-based authorization with `[Authorize(Roles = "Admin")]`
- Use httpOnly cookies for refresh tokens
- Validate all inputs and use parameterized queries